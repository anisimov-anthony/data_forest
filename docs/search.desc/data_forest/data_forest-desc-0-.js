searchState.loadedDescShard("data_forest", 0, "A classic binary search tree without automatic balancing.\nA binary search tree implementation.\nReturns a value that is the rounded <code>value</code> to the nearest …\nChecks if the tree contains a <code>value</code>.\nPerforms a tree traversal and returns all pairs of …\nReturns a value that is the rounded <code>value</code> to the nearest …\nReturns the argument unchanged.\nReturns the height of the tree (longest path from root to …\nReturns references to the elements of the tree in the …\nInserts a <code>value</code> into the tree while maintaining tree …\nCalls <code>U::from(self)</code>.\nChecks if the tree is empty.\nReturns references to the elements of the tree in the …\nReturns a reference to the maximum element of the tree or …\nReturns a reference to the minimum element of the tree or …\nCreates a new empty <code>BinarySearchTree</code>.\nInternal implementation of <code>BinarySearchTree</code> nodes.\nReturns the number of elements of the tree (the number of …\nReturns references to the elements of the tree in the …\nReturns references to the elements of the tree in the …\nRemoves a <code>value</code> from the tree while maintaining tree …\nFor visualizing (Graphviz, DOT format).\nA node in a binary tree structure.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLeft child node (less than parent value).\nCreates a new <code>BinaryNode</code> with the given <code>value</code> and no …\nRight child node (greater than parent value).\nThe value stored in this node.\nConverts pairs of connections between <code>BinaryNode</code>s in …")